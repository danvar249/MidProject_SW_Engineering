package ek_configuration;

import client.ClientController;
import client.ClientUI;
import common.SCCP;
import common.ServerClientRequestTypes;
import common.WindowStarter;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.text.Text;
import javafx.stage.Stage;
/**

The class _EKConfigurationLogisticsEmployeeController is the controller class for the logistics employee frame in the EK configuration software.
It handles partial restock and full restock requests from the logistics employee and updates the stock of products in the machine accordingly.
It also has a logout button for logging out the employee from the system.
@author Dima
@version 1.0
@since 2023-01
*/
public class _EKConfigurationLogisticsEmployeeController {

    @FXML
    private Button btnPartialRestock;

    @FXML
    private Button btnRestockAll;

    @FXML
    private Label statusLabel;

    @FXML
    private Text txtWelcomeText;

	@FXML Button btnLogout;
	/**

	The method getBtnPartialRestock handles the partial restock request from the logistics employee.
	It hides the current window and opens the partial restock frame for the employee to perform the restock.
	@param event the ActionEvent object generated by the button press.
	*/
    @FXML
    void getBtnPartialRestock(ActionEvent event) {
    	String nextScreenPath = "/gui/_EKConfigurationPartialRestockFrame.fxml";
		((Node)event.getSource()).getScene().getWindow().hide();
		// prepare the new stage:
		Stage primaryStage = new Stage();
		WindowStarter.createWindow(primaryStage, new Object(), nextScreenPath, null, "Partial Restock Frame", true);
		primaryStage.show();
    }
    /**

    The method getBtnRestockAll handles the full restock request from the logistics employee.

    It updates the stock of all products in the current machine to their maximum stock and sets the restock flag to 0.

    It also displays an alert message to inform the employee of the success of the operation.

    @param event the ActionEvent object generated by the button press.
    */
    @FXML
    void getBtnRestockAll(ActionEvent event) {

    	// set all products in current machine to their max stock (This worker came with a SEMI!)
    	ClientUI.getClientController().accept(new SCCP(ServerClientRequestTypes.UPDATE, new Object[]
    			{"products_in_machine", "stock = max_stock, restock_flag=0", "machineID="+ClientController.getEKCurrentMachineID()}));
    	// inform user
		Alert successMessage = new Alert(AlertType.INFORMATION);
		successMessage.setTitle("Update Success");
		successMessage.setHeaderText("Update Success");
		successMessage.setContentText("FULL restock successful!");
		successMessage.show();
    	
    }
    /**
    This method handles the action event that is triggered by clicking the logout button. It sends a logout request to the server using the {@link ClientUI#clientController} object and the current system user's username.
     It then closes the current window and opens the login frame.
    @param event The action event that is triggered by clicking the logout button.
    */
	@FXML public void getBtnLogout(ActionEvent event) {
    	// actually log him out
    	ClientUI.getClientController().accept(new SCCP(ServerClientRequestTypes.LOGOUT, ClientController.getCurrentSystemUser().getUsername()));
    	// inform log
    	System.out.println("EK Customer "+ ClientController.getCurrentSystemUser().getUsername()+" logged out!");
		// load home area for service rep
		// sammy D the current window
		((Node)event.getSource()).getScene().getWindow().hide();
		// prepare the new stage:
		Stage primaryStage = new Stage();

		WindowStarter.createWindow(primaryStage, this, "/gui/_EKConfigurationLoginFrame.fxml", null, "Login", false);
		primaryStage.show();
		
	}

}
